import os
import yt_dlp
from datetime import timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes
)

# --- 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! üëã\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube, –∏ —è –ø–æ–∫–∞–∂—É –º–µ–Ω—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.')

# --- 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ ---
async def show_download_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É, —Å–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ callback_data."""
    url = update.message.text
    if not url or not ("youtube.com/" in url or "youtu.be/" in url):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
        return

    msg = await update.message.reply_text('üîç –ò—â—É –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã...')

    ydl_opts = {
        'quiet': True,
        'cookiefile': 'cookies.txt',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        'noplaylist': True,
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

        video_id = info.get('id')
        thumbnail_url = info.get('thumbnail')
        title = info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        author = info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        duration_sec = info.get('duration', 0)
        upload_date_str = info.get('upload_date', '')

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ –ì–ì–ì–ì–ú–ú–î–î –≤ –î–î.–ú–ú.–ì–ì–ì–ì
        formatted_date = f"{upload_date_str[6:8]}.{upload_date_str[4:6]}.{upload_date_str[0:4]}" if len(upload_date_str) == 8 else "N/A"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        formatted_duration = str(timedelta(seconds=int(duration_sec)))

        caption = (
            f"**{title}**\n\n"
            f"üë§ **–ê–≤—Ç–æ—Ä:** {author}\n"
            f"üìÖ **–î–∞—Ç–∞:** {formatted_date}\n"
            f"‚è≥ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {formatted_duration}"
        )

        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
        best_audio = next((f for f in reversed(info.get('formats', [])) if f.get('acodec') != 'none' and f.get('vcodec') == 'none'), None)
        if best_audio:
            filesize_mb = (best_audio.get('filesize') or 0) / (1024*1024)
            button_text = f"üéß –ê—É–¥–∏–æ / ~{filesize_mb:.1f} MB"
            # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏: –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–∏–ø, –∫–æ–¥_—Ñ–æ—Ä–º–∞—Ç–∞, id_–≤–∏–¥–µ–æ
            callback_data = f"dl:audio:a_{best_audio['format_id']}:{video_id}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
        unique_formats = []
        seen_heights = set()
        for f in sorted(info.get('formats', []), key=lambda x: x.get('height', 0) or 0, reverse=True):
            if f.get('height') and f.get('ext') == 'mp4' and f.get('vcodec') != 'none' and f['height'] not in seen_heights:
                seen_heights.add(f['height'])
                unique_formats.append(f)
        
        for f in unique_formats:
            height = f['height']
            filesize_mb = (f.get('filesize') or f.get('filesize_approx', 0)) / (1024*1024)
            
            # –ï—Å–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ—Ç –∑–≤—É–∫–∞ -> —Ç—Ä–µ–±—É–µ—Ç —Å–∫–ª–µ–π–∫–∏. –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ 'h_–í–´–°–û–¢–ê'.
            if f.get('acodec') == 'none':
                format_code = f"h_{height}"
            else: # –ò–Ω–∞—á–µ —ç—Ç–æ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª. –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ 'f_ID'.
                format_code = f"f_{f['format_id']}"
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 50 –ú–ë (–ª–∏–º–∏—Ç Telegram)
            # if filesize_mb > 49.5: continue

            button_text = f"üé¨ {height}p / ~{filesize_mb:.1f} MB"
            callback_data = f"dl:video:{format_code}:{video_id}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)

        if thumbnail_url:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=thumbnail_url, caption=caption, reply_markup=reply_markup, parse_mode='Markdown')
            await msg.delete()
        else:
            await msg.edit_text(caption, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        await msg.edit_text(f'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')

# --- 3. –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –∏ '—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç' callback_data."""
    query = update.callback_query
    await query.answer()

    data_parts = query.data.split(':', 3)
    if len(data_parts) != 4:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
        return

    action, media_type, format_code, video_id = data_parts
    
    if action == 'dl':
        url = f"https://www.youtube.com/watch?v={video_id}"
        
        # --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ---
        final_format_string = ""
        if format_code.startswith('h_'): # –¢—Ä–µ–±—É–µ—Ç —Å–∫–ª–µ–π–∫–∏
            height = format_code.split('_')[1]
            final_format_string = f'bestvideo[height={height}][ext=mp4]+bestaudio[ext=m4a]/best[height={height}][ext=mp4]'
        elif format_code.startswith('f_'): # –ì–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            final_format_string = format_code.split('_', 1)[1]
        elif format_code.startswith('a_'): # –ê—É–¥–∏–æ
            final_format_string = format_code.split('_', 1)[1]

        if not final_format_string:
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return

        await query.edit_message_caption(caption=query.message.caption_markdown + "\n\n*üì• –°–∫–∞—á–∏–≤–∞—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...*", parse_mode='Markdown')

        ydl_opts = {
            'format': final_format_string,
            'outtmpl': f'{video_id}.%(ext)s',
            'cookiefile': 'cookies.txt',
        }

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                file_path = ydl.prepare_filename(info)

            await query.edit_message_caption(caption=query.message.caption_markdown + "\n\n*üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ Telegram...*", parse_mode='Markdown')
            
            with open(file_path, 'rb') as file:
                if media_type == 'video':
                    await context.bot.send_video(chat_id=query.message.chat_id, video=file, supports_streaming=True)
                else: # audio
                    await context.bot.send_audio(chat_id=query.message.chat_id, audio=file)
            
            await query.delete_message()
            os.remove(file_path)

        except Exception as e:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            await query.edit_message_caption(caption=query.message.caption_markdown) # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

# --- 4. –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ó–∞–º–µ–Ω–∏—Ç–µ '–í–ê–®_–¢–û–ö–ï–ù' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    TOKEN = '8259544457:AAHB6ZdeYcpiKCvdljrASC_H6BEBKd7oWJ8'
    
    application = ApplicationBuilder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, show_download_menu))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
